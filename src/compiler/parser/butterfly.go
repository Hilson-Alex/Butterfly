// Code generated by goyacc -o ./compiler/parser/butterfly.go ../yacc/butterfly.y. DO NOT EDIT.

//line ../yacc/butterfly.y:1

package parser

import __yyfmt__ "fmt"

//line ../yacc/butterfly.y:3

import (
	"github.com/Hilson-Alex/Butterfly/src/compiler/checker"
)

//line ../yacc/butterfly.y:11
type yySymType struct {
	yys     int
	content string
	parsed string
	scope  *checker.BFScope
	result *string
}

const FLOAT_NUMBER = 57346
const UNSIGNED_NUMBER = 57347
const SIGNED_NUMBER = 57348
const TEXT = 57349
const BOOLEAN = 57350
const TYPE = 57351
const ANY = 57352
const CONST = 57353
const LET = 57354
const DO = 57355
const WHILE = 57356
const FOR = 57357
const IF = 57358
const ELSE = 57359
const SWITCH = 57360
const CASE = 57361
const DEFAULT = 57362
const ON = 57363
const SHARE = 57364
const FINISH = 57365
const MODULE = 57366
const MESSAGE = 57367
const DELIMITER = 57368
const INCREMENT = 57369
const NOT = 57370
const LOGIC = 57371
const ARITHMETIC = 57372
const COMPARATOR = 57373
const ASSIGN = 57374
const EXP_ASSIGN = 57375
const COMMA = 57376
const COLON = 57377
const DOT = 57378
const OP_CURLY = 57379
const CL_CURLY = 57380
const OP_PARENT = 57381
const CL_PARENT = 57382
const OP_SQUARE = 57383
const CL_SQUARE = 57384
const IDENTIFIER = 57385
const NEGATED = 57386

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"FLOAT_NUMBER",
	"UNSIGNED_NUMBER",
	"SIGNED_NUMBER",
	"TEXT",
	"BOOLEAN",
	"TYPE",
	"ANY",
	"CONST",
	"LET",
	"DO",
	"WHILE",
	"FOR",
	"IF",
	"ELSE",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"ON",
	"SHARE",
	"FINISH",
	"MODULE",
	"MESSAGE",
	"DELIMITER",
	"INCREMENT",
	"NOT",
	"LOGIC",
	"ARITHMETIC",
	"COMPARATOR",
	"ASSIGN",
	"EXP_ASSIGN",
	"COMMA",
	"COLON",
	"DOT",
	"OP_CURLY",
	"CL_CURLY",
	"OP_PARENT",
	"CL_PARENT",
	"OP_SQUARE",
	"CL_SQUARE",
	"IDENTIFIER",
	"NEGATED",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line ../yacc/butterfly.y:299

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	6, 64,
	30, 64,
	31, 64,
	-2, 46,
	-1, 61,
	6, 65,
	30, 65,
	31, 65,
	-2, 55,
	-1, 102,
	29, 55,
	34, 55,
	35, 67,
	38, 55,
	-2, 65,
	-1, 103,
	35, 17,
	-2, 60,
	-1, 104,
	35, 18,
	-2, 61,
	-1, 105,
	35, 19,
	-2, 62,
	-1, 106,
	35, 20,
	-2, 63,
	-1, 107,
	35, 21,
	-2, 54,
	-1, 243,
	19, 121,
	20, 121,
	38, 121,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 349

var yyAct = [...]uint8{
	61, 94, 125, 203, 77, 148, 194, 144, 222, 214,
	78, 159, 42, 48, 100, 90, 53, 51, 60, 47,
	14, 76, 62, 193, 55, 56, 57, 58, 62, 15,
	16, 160, 161, 158, 153, 173, 154, 63, 41, 215,
	155, 149, 138, 156, 204, 73, 139, 64, 59, 207,
	202, 175, 124, 87, 63, 36, 140, 63, 110, 54,
	88, 63, 23, 63, 22, 4, 109, 166, 84, 165,
	111, 63, 83, 130, 85, 102, 49, 50, 86, 121,
	244, 115, 115, 212, 224, 225, 55, 56, 57, 58,
	62, 49, 50, 113, 113, 113, 99, 114, 117, 112,
	79, 113, 79, 234, 200, 120, 185, 85, 65, 134,
	59, 209, 119, 199, 118, 131, 66, 115, 96, 204,
	228, 54, 136, 44, 227, 63, 157, 188, 183, 136,
	84, 180, 153, 133, 163, 171, 135, 170, 137, 28,
	127, 164, 126, 162, 211, 96, 68, 69, 70, 71,
	72, 167, 204, 95, 14, 74, 174, 55, 56, 57,
	58, 181, 182, 15, 16, 160, 161, 158, 153, 14,
	154, 7, 187, 123, 155, 149, 92, 156, 15, 16,
	95, 157, 190, 191, 113, 63, 195, 101, 11, 198,
	186, 236, 116, 205, 196, 63, 63, 113, 229, 184,
	129, 210, 110, 197, 33, 24, 34, 34, 55, 56,
	57, 58, 62, 49, 50, 30, 128, 218, 189, 40,
	113, 37, 233, 231, 230, 67, 217, 79, 232, 237,
	235, 157, 59, 241, 240, 179, 195, 242, 238, 243,
	177, 178, 82, 54, 157, 44, 245, 63, 103, 104,
	105, 106, 107, 49, 50, 55, 56, 57, 58, 62,
	75, 50, 82, 79, 226, 216, 81, 80, 208, 206,
	220, 169, 59, 168, 21, 20, 19, 3, 108, 59,
	224, 225, 142, 54, 161, 44, 81, 63, 14, 93,
	54, 10, 44, 9, 63, 18, 38, 15, 16, 2,
	26, 82, 32, 132, 5, 1, 6, 11, 97, 122,
	45, 27, 68, 69, 70, 71, 72, 239, 147, 223,
	221, 145, 201, 172, 146, 176, 192, 152, 151, 150,
	143, 141, 98, 219, 213, 35, 17, 25, 46, 39,
	31, 13, 29, 12, 8, 89, 91, 52, 43,
}

var yyPact = [...]int16{
	275, -1000, 22, -1000, -1000, 134, -1000, -1000, 286, -1000,
	-1000, 288, 250, 249, 248, 21, 19, 167, 100, -1000,
	-1000, -1000, 180, 172, -1000, -1000, -1000, -1000, 12, 189,
	287, -1000, 187, 204, 67, 76, -1000, 308, -1000, -1000,
	204, -1000, 118, -1000, 251, -1000, -1000, 234, -1000, -1000,
	-1000, -1000, -1000, 236, 20, -1000, -1000, -1000, -1000, 14,
	-1000, -1000, -1000, 140, -1000, 280, 143, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 244, 171, 24, -1000, 29, 20,
	153, 153, -1000, 74, 72, 234, -1000, 20, -1000, -1000,
	38, 137, 9, 171, -1000, -1000, 104, 102, 182, 168,
	165, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31, -1000,
	204, 298, -1000, -1000, 256, -1000, 153, 295, -1000, -1000,
	69, 142, -1000, 3, -1000, 18, -1000, -1000, 142, 204,
	-1000, -1000, 27, 256, -1000, 25, -1000, 38, 67, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 247, 245,
	-1000, -1000, -1000, 98, 96, 28, 8, 208, 92, 143,
	143, 89, 164, -1000, 29, -1000, -1000, 66, -1000, -1000,
	20, -6, 88, -1000, -1000, 186, -1000, 204, 204, -1000,
	11, -1000, 270, 20, 204, -1000, 73, 64, 7, 115,
	-1000, -1000, 243, 6, -1000, -1000, 242, 71, -1000, 143,
	107, 43, -1000, -1000, -4, 239, 20, 185, -1000, -1000,
	253, 261, 238, 86, -1000, 163, -1000, 198, 204, -1000,
	116, 65, -1000, 156, 204, -1000, -1000, -1000, -4, 82,
	-6, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 40, 152, 143, -1000,
}

var yyPgo = [...]int16{
	0, 348, 19, 17, 347, 18, 0, 346, 15, 345,
	13, 16, 14, 187, 4, 344, 282, 343, 342, 341,
	340, 12, 278, 339, 10, 21, 338, 293, 337, 336,
	335, 334, 2, 333, 6, 332, 1, 331, 330, 329,
	328, 327, 11, 326, 5, 325, 7, 324, 323, 322,
	3, 321, 320, 8, 319, 318, 9, 317, 310, 309,
	308, 306, 305, 304,
}

var yyR1 = [...]int8{
	0, 63, 62, 62, 61, 15, 15, 16, 16, 16,
	29, 29, 28, 28, 17, 18, 18, 13, 13, 13,
	13, 13, 19, 20, 20, 23, 23, 22, 21, 21,
	58, 58, 24, 24, 26, 14, 14, 14, 60, 60,
	35, 35, 25, 25, 25, 1, 1, 3, 3, 3,
	3, 3, 2, 2, 5, 5, 4, 10, 10, 10,
	10, 10, 10, 10, 11, 11, 12, 12, 6, 9,
	9, 59, 59, 7, 7, 8, 8, 27, 30, 30,
	47, 48, 48, 49, 49, 55, 50, 31, 31, 31,
	56, 57, 57, 36, 36, 32, 32, 37, 37, 37,
	37, 37, 37, 37, 37, 38, 38, 38, 39, 43,
	43, 40, 41, 42, 46, 33, 33, 33, 51, 52,
	52, 53, 54, 54, 34, 34, 44, 45, 45, 45,
}

var yyR2 = [...]int8{
	0, 0, 4, 1, 5, 0, 2, 2, 2, 2,
	0, 2, 1, 1, 5, 0, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 0, 2, 2, 2, 1,
	1, 1, 0, 4, 5, 4, 1, 3, 1, 1,
	3, 5, 0, 1, 3, 1, 1, 3, 2, 4,
	3, 1, 1, 1, 1, 1, 3, 3, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	3, 0, 4, 2, 3, 0, 4, 6, 0, 1,
	6, 1, 1, 1, 1, 5, 3, 0, 1, 3,
	3, 1, 1, 3, 2, 0, 2, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 9, 4,
	1, 2, 4, 4, 6, 0, 2, 2, 7, 1,
	2, 3, 2, 1, 0, 1, 2, 2, 2, 1,
}

var yyChk = [...]int16{
	-1000, -62, 24, 2, 43, -63, -61, 37, -15, -27,
	-16, 21, -17, -19, 2, 11, 12, -29, 7, 26,
	26, 26, 43, 43, 38, -28, -16, -27, 39, -18,
	35, -20, -22, 32, 35, -30, 43, 32, 9, -23,
	32, -14, -21, -1, 41, -58, -26, -2, -10, 9,
	10, -3, -4, -11, 39, 4, 5, 6, 7, 28,
	-5, -6, 8, 43, -21, 41, 40, -13, 4, 5,
	6, 7, 8, -14, 37, 9, -25, -14, -24, 29,
	31, 30, 6, -3, -10, -2, -5, 39, -6, -9,
	-8, -7, 36, 9, -36, 37, 2, -60, -35, -25,
	-12, -13, -6, 4, 5, 6, 7, 8, -22, 42,
	34, 41, -2, -10, -11, -6, 39, -11, 40, 40,
	-3, 41, -59, 36, 43, -32, 38, 38, 34, 35,
	42, -14, 5, -11, 40, -12, -6, -8, 39, 43,
	38, -37, -16, -38, -46, -51, -47, -55, -44, 23,
	-39, -40, -41, 16, 18, 22, 25, -6, 15, -42,
	13, 14, -12, -14, -24, 42, 42, -21, 26, 26,
	39, 39, -48, 7, -6, 43, -45, 32, 33, 27,
	39, -36, -36, 39, 35, 40, -2, -6, 39, 32,
	-14, -14, -43, 12, -34, -44, -42, -2, -14, 40,
	40, -49, 43, -50, 37, -50, 26, 43, 26, 40,
	-36, 37, 40, -31, -56, 43, 26, -2, 32, -33,
	17, -52, -53, -54, 19, 20, 26, 38, 34, 35,
	26, -14, -46, -36, 38, -53, 35, -14, -56, -57,
	-14, -50, -34, -32, 40, -36,
}

var yyDef = [...]int16{
	0, -2, 0, 3, 1, 0, 2, 5, 0, 10,
	6, 0, 0, 0, 0, 0, 0, 0, 0, 7,
	8, 9, 15, 0, 4, 11, 12, 13, 78, 0,
	0, 22, 25, 0, 0, 0, 79, 0, 16, 23,
	0, 24, 0, 36, 42, 32, 29, 45, -2, 30,
	31, 52, 53, 0, 0, 60, 61, 62, 63, 0,
	51, -2, 54, 75, 27, 0, 0, 14, 17, 18,
	19, 20, 21, 26, 42, 30, 0, 43, 28, 0,
	0, 0, 58, 52, 64, 0, 48, 0, 55, 68,
	69, 71, 0, 0, 77, 95, 0, 0, 38, 39,
	0, 66, -2, -2, -2, -2, -2, -2, 0, 37,
	0, 0, 47, 64, 56, 65, 0, 57, 50, 59,
	52, 0, 75, 0, 73, 0, 94, 35, 0, 0,
	32, 44, 0, 0, 49, 0, 67, 70, 0, 74,
	93, 96, 97, 98, 99, 100, 101, 102, 0, 0,
	105, 106, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 34, 33, 76, 0, 103, 104,
	0, 0, 0, 81, 82, 0, 126, 0, 0, 129,
	124, 111, 0, 0, 0, 72, 0, 0, 0, 0,
	127, 128, 0, 0, 110, 125, 0, 0, 41, 0,
	0, 0, 83, 84, 87, 0, 0, 0, 112, 113,
	115, 0, 0, 0, 88, 0, 85, 0, 0, 114,
	0, 0, 119, 0, 0, 123, 80, 86, 0, 0,
	124, 109, 116, 117, 118, 120, 95, 122, 89, 90,
	91, 92, 0, -2, 0, 108,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:62
		{
			createModule(yyDollar[2].scope, yyDollar[2].content)
		}
	case 2:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ../yacc/butterfly.y:62
		{
			saveModule(yyDollar[4].parsed, yyDollar[1].result)
		}
	case 4:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ../yacc/butterfly.y:72
		{
			yyVAL.parsed = blJoin(yyDollar[2].parsed, yyDollar[3].parsed, yyDollar[4].parsed)
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:76
		{
			yyVAL.parsed = ""
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:77
		{
			yyVAL.parsed = blJoin(yyDollar[1].parsed, yyDollar[2].parsed)
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:79
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:80
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:81
		{
			yyVAL.parsed = ""
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:83
		{
			yyVAL.parsed = ""
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:84
		{
			yyVAL.parsed = blJoin(yyDollar[1].parsed, yyDollar[2].parsed)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:86
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:87
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 14:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ../yacc/butterfly.y:91
		{
			//	addConst($<scope>$,$2,$5,$3)
			yyVAL.parsed = wsJoin(yyDollar[1].content, yyDollar[2].content, yyDollar[3].parsed, yyDollar[4].content, yyDollar[5].parsed)
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:96
		{
			yyVAL.parsed = ""
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:97
		{
			yyVAL.parsed = getType(yyDollar[2].content)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:99
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:100
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:101
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:102
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:103
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:107
		{
			yyVAL.parsed = wsJoin("var", yyDollar[2].content, yyDollar[3].parsed)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:111
		{
			yyVAL.parsed = wsJoin(yyDollar[1].parsed, yyDollar[2].parsed)
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:112
		{
			yyVAL.parsed = wsJoin(yyDollar[1].content, yyDollar[2].parsed)
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:114
		{
			yyVAL.parsed = ""
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:115
		{
			yyVAL.parsed = wsJoin(yyDollar[1].content, yyDollar[2].parsed)
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:117
		{
			yyVAL.parsed = yyDollar[2].parsed
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:119
		{
			yyVAL.parsed = yyDollar[2].parsed + getType(yyDollar[1].parsed)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:119
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:121
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:121
		{
			yyVAL.parsed = "interface{}"
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:123
		{
			yyVAL.parsed = ""
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ../yacc/butterfly.y:124
		{
			yyVAL.parsed = concat(yyDollar[1].parsed, "[", yyDollar[3].content, "]")
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ../yacc/butterfly.y:126
		{
			yyVAL.parsed = concat(yyDollar[5].parsed, "map[", getType(yyDollar[2].content), "]", yyDollar[3].parsed)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ../yacc/butterfly.y:130
		{
			yyVAL.parsed = concat(yyDollar[1].parsed, "{", yyDollar[3].parsed, "}")
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:131
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:132
		{
			yyVAL.parsed = concat("[]interface{}", "{", yyDollar[2].parsed, "}")
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:134
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:134
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:136
		{
			yyVAL.parsed = concat(yyDollar[1].parsed, ":", yyDollar[3].parsed)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ../yacc/butterfly.y:137
		{
			yyVAL.parsed = concat(yyDollar[1].parsed, ", ", yyDollar[3].parsed, ":", yyDollar[5].parsed)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:139
		{
			yyVAL.parsed = ""
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:140
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:141
		{
			yyVAL.parsed = concat(yyDollar[1].parsed, ",", yyDollar[3].parsed)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:145
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:146
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:149
		{
			yyVAL.parsed = wsJoin(yyDollar[1].parsed, yyDollar[2].content, yyDollar[3].parsed)
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:151
		{
			yyVAL.parsed = concat("!(", yyDollar[2].parsed, ")")
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ../yacc/butterfly.y:153
		{
			yyVAL.parsed = concat("!(", yyDollar[3].parsed, ")")
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:155
		{
			yyVAL.parsed = concat("(", yyDollar[2].parsed, ")")
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:157
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:159
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:160
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:162
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:163
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:165
		{
			yyVAL.parsed = wsJoin(yyDollar[1].parsed, yyDollar[2].content, yyDollar[3].parsed)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:167
		{
			yyVAL.parsed = concat(yyDollar[1].parsed, yyDollar[2].content, yyDollar[3].parsed)
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:168
		{
			yyVAL.parsed = concat(yyDollar[1].parsed, yyDollar[2].content)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:169
		{
			yyVAL.parsed = concat("(", yyDollar[2].parsed, ")")
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:170
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:171
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:172
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:173
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:175
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:176
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:178
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:179
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:181
		{
			yyVAL.parsed = concat(yyDollar[1].content, yyDollar[2].parsed)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:183
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:184
		{
			yyVAL.parsed = concat(yyDollar[1].parsed, yyDollar[2].parsed, yyDollar[3].parsed)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:186
		{
			yyVAL.parsed = ""
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ../yacc/butterfly.y:187
		{
			yyVAL.parsed = concat(".(", getType(yyDollar[3].parsed), ")")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:189
		{
			yyVAL.parsed = concat("[\"", yyDollar[2].content, "\"]")
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:190
		{
			yyVAL.parsed = concat(yyDollar[1].parsed, ".(map[string]interface{})", concat("[\"", yyDollar[3].content, "\"]"))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:192
		{
			yyVAL.parsed = ""
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ../yacc/butterfly.y:194
		{
			yyVAL.parsed = concat(yyDollar[1].parsed, "[", yyDollar[3].parsed, "])")
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line ../yacc/butterfly.y:198
		{
			yyVAL.parsed = eventListen(yyDollar[2].content, yyDollar[4].parsed, yyDollar[6].parsed, yyDollar[2].scope)
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:202
		{
			yyVAL.parsed = "_"
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:203
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line ../yacc/butterfly.y:205
		{
			yyVAL.parsed = eventShare(yyDollar[2].parsed, yyDollar[4].parsed, yyDollar[1].scope)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:209
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:209
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:211
		{
			yyVAL.parsed = yyDollar[1].content
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:211
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ../yacc/butterfly.y:213
		{
			yyVAL.parsed = wsJoin("var", yyDollar[2].content, yyDollar[3].content, yyDollar[4].parsed)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:217
		{
			yyVAL.parsed = concat("map[string]interface{}{", yyDollar[2].parsed, "}")
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:219
		{
			yyVAL.parsed = ""
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:220
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:221
		{
			yyVAL.parsed = concat(yyDollar[1].parsed, ",", yyDollar[3].parsed)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:223
		{
			yyVAL.parsed = concat("\"", yyDollar[1].content, "\": ", yyDollar[3].parsed)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:227
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:227
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:231
		{
			yyVAL.parsed = blJoin("{", yyDollar[2].parsed, "}")
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:231
		{
			yyVAL.parsed = "{}"
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:233
		{
			yyVAL.parsed = ""
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:234
		{
			yyVAL.parsed = blJoin(yyDollar[1].parsed, yyDollar[2].parsed)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:236
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:237
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:238
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:239
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:240
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:241
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:242
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:243
		{
			yyVAL.parsed = "return"
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:247
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:248
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:249
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
//line ../yacc/butterfly.y:251
		{
			yyVAL.parsed = concat("for ", yyDollar[3].parsed, ";", yyDollar[5].parsed, ";", yyDollar[7].parsed, " ", yyDollar[9].parsed)
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ../yacc/butterfly.y:255
		{
			yyVAL.parsed = wsJoin(yyDollar[2].content, ":=", yyDollar[4].parsed)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:256
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:258
		{
			yyVAL.parsed = wsJoin("for", yyDollar[1].parsed, yyDollar[2].parsed)
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ../yacc/butterfly.y:260
		{
			yyVAL.parsed = concat("for {", yyDollar[2].parsed, " if ", yyDollar[3].parsed, " { break }}")
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ../yacc/butterfly.y:264
		{
			yyVAL.parsed = yyDollar[3].parsed
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line ../yacc/butterfly.y:268
		{
			yyVAL.parsed = wsJoin("if", yyDollar[3].parsed, yyDollar[5].parsed, yyDollar[6].parsed)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:272
		{
			yyVAL.parsed = ""
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:273
		{
			yyVAL.parsed = "else " + yyDollar[2].parsed
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:273
		{
			yyVAL.parsed = "else " + yyDollar[2].parsed
		}
	case 118:
		yyDollar = yyS[yypt-7 : yypt+1]
//line ../yacc/butterfly.y:275
		{
			yyVAL.parsed = wsJoin("switch", yyDollar[3].parsed, "{\n", yyDollar[6].parsed, "\n}")
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:279
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:279
		{
			yyVAL.parsed = blJoin(yyDollar[1].parsed, yyDollar[2].parsed)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ../yacc/butterfly.y:281
		{
			yyVAL.parsed = concat(yyDollar[1].parsed, ":", yyDollar[3].parsed)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:285
		{
			yyVAL.parsed = wsJoin("case", yyDollar[2].parsed)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:286
		{
			yyVAL.parsed = "default"
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ../yacc/butterfly.y:290
		{
			yyVAL.parsed = ""
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:291
		{
			yyVAL.parsed = yyDollar[1].parsed
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:293
		{
			yyVAL.parsed = yyDollar[1].parsed + yyDollar[2].parsed
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:295
		{
			yyVAL.parsed = yyDollar[1].content + yyDollar[2].parsed
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ../yacc/butterfly.y:296
		{
			yyVAL.parsed = yyDollar[1].content + yyDollar[2].parsed
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ../yacc/butterfly.y:297
		{
			yyVAL.parsed = yyDollar[1].content
		}
	}
	goto yystack /* stack new state and value */
}
